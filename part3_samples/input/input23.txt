fun empty x
push :error:
return
funEnd
pop
fun cons e
fun lambda1 list
fun lambda2 x
fun callRest unit
pushn list
pushn x
pushi 1
sub
call
return
funEnd
fun retE unit
pushn e
return
funEnd
pushn x
pushi 0
equal
pushn callRest
pushn retE
if
push :unit:
call
return
funEnd
pushn lambda2
return
funEnd
pushn lambda1
return
funEnd
pop
fun len list
fun isLen n
pushb :false:
push :error:
pushb :true:
pushn empty
pushn list
pushn n
call
call
pop
pop
pop
return
funEnd
fun acc n
fun retN x
pushn n
return
funEnd
pushn isLen
pushn n
call
pushn acc
pushn retN
if
pushn n
pushi 1
add
call
return
funEnd
pushn acc
pushi 0
call
return
funEnd
pop
pushn cons
pushi 2
call
pushn empty
call
pushn cons
pushs "~~/O/~~"
call
swap
call
pushn cons
pushi 0
call
swap
call
pushn cons
pushb :true:
call
swap
call
pushn list
swap
bind
pop
pushn len
pushn list
call
pushn list
pushi 2
call
pushs "*"
cat 
quit
