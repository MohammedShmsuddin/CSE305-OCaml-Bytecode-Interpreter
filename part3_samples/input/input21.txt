fun empty x
push :error:
return
funEnd
pop
fun cons e
fun lambda1 list
fun lambda2 x
fun callRest unit
pushn list
pushn x
pushi 1
sub
call
return
funEnd
fun retE unit
pushn e
return
funEnd
pushn x
pushi 0
equal
pushn callRest
pushn retE
if
push :unit:
call
return
funEnd
pushn lambda2
return
funEnd
pushn lambda1
return
funEnd
pop
pushn cons
pushs "hello "
call
pushn empty
call
pushn cons
pushs "world!"
call
swap
call
pushn cons
push :unit:
call
swap
call
pushn list
swap
bind
pop
pushn list
pushi 2
call
pushn list
pushi 1
call
pushn list
pushi 0
call
pushn list
pushi 5
call
pushn list
pushi 2
call
pushn list
pushi 1
call
cat
quit
